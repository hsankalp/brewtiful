{"version":3,"sources":["utility.js","context/BreweryContext.js","components/Brewery.jsx","components/Loader.jsx","components/ErrorMessage.jsx","properties.js","components/Breweries.jsx","hooks/FetchHook.js","components/Search.jsx","components/BreweryMap.jsx","components/Filter.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["capitalizeFirstLetter","string","replace","charAt","toUpperCase","BreweryContext","createContext","Brewery","brewery","index","useState","Math","floor","random","imageUrl","setBrewery","useContext","className","src","alt","name","brewery_type","icon","faMapMarkerAlt","street","city","state","postal_code","phone","href","faPhoneAlt","website_url","faExternalLinkAlt","latitude","longitude","onClick","faCompass","target","rel","faDirections","Loader","ErrorMessage","properties","breweryUrl","tileLayer","defaultCity","defaultPosition","breweryTypes","Breweries","filter","filterToApply","url","dependencies","data","setData","isLoading","setIsLoading","error","setError","useEffect","console","log","fetch","then","resp","ok","Error","statusText","json","catch","err","useFetch","breweries","length","map","idx","key","id","getBreweries","Search","onSearch","nameRef","useRef","locationRef","current","focus","onSubmit","e","preventDefault","value","type","placeholder","ref","faSearch","BreweryMap","L","center","zoom","maxZoom","addTo","marker","remove","Filter","onFilter","showFilterCard","setShowFilterCard","selected","setSelected","handleChange","faFilter","onChange","checked","Home","setName","location","setLocation","setFilter","Provider","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1936e42.chunk.js","sourcesContent":["export function capitalizeFirstLetter(string) {\r\n  return string.replace(string.charAt(0), string.charAt(0).toUpperCase());\r\n}\r\n","import { createContext } from \"react\";\r\n\r\nexport const BreweryContext = createContext(null);\r\n","import React, { useState, useContext } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faExternalLinkAlt,\r\n  faMapMarkerAlt,\r\n  faPhoneAlt,\r\n  faDirections,\r\n  faCompass\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../styles/Brewery.css\";\r\nimport { capitalizeFirstLetter } from \"../utility\";\r\nimport { BreweryContext } from \"../context/BreweryContext\";\r\n\r\nconst Brewery = ({ brewery, index }) => {\r\n  const [imageUrl] = useState(\r\n    `https://picsum.photos/id/${Math.floor(Math.random() * 200)}/200/200`\r\n  );\r\n\r\n  const { setBrewery } = useContext(BreweryContext);\r\n\r\n  return (\r\n    <>\r\n      {brewery && (\r\n        <div className=\"card brewery-card\">\r\n          <div className=\"d-flex flex-wrap\">\r\n            <div className=\"flex-item p-2\">\r\n              <img src={imageUrl} alt=\"beer\"></img>\r\n            </div>\r\n            <div className=\"flex-item p-2\">\r\n              <h5 className=\"brewery-name\">\r\n                {index + 1}. {brewery.name}\r\n              </h5>\r\n              <p>{capitalizeFirstLetter(brewery.brewery_type)} brewery</p>\r\n              <p>\r\n                <FontAwesomeIcon icon={faMapMarkerAlt} /> {brewery.street}\r\n                <br></br>\r\n                {brewery.city}, {brewery.state}\r\n                <br></br>\r\n                {brewery.postal_code}\r\n              </p>\r\n              {brewery.phone && (\r\n                <p>\r\n                  <a href={`tel:${brewery.phone}`}>\r\n                    <FontAwesomeIcon icon={faPhoneAlt} /> {brewery.phone}\r\n                  </a>\r\n                </p>\r\n              )}\r\n              <p>\r\n                {brewery.website_url && (\r\n                  <FontAwesomeIcon icon={faExternalLinkAlt} />\r\n                )}{\" \"}\r\n                <a href={brewery.website_url}>{brewery.website_url}</a>\r\n              </p>\r\n              {brewery.latitude && brewery.longitude && (\r\n                <button\r\n                  className=\"btn btn-sm btn-dark location-button\"\r\n                  onClick={() => setBrewery(brewery)}\r\n                >\r\n                  <FontAwesomeIcon icon={faCompass} /> Location\r\n                </button>\r\n              )}\r\n              {brewery.latitude && brewery.longitude && (\r\n                <a\r\n                  href={`https://www.google.com/maps/place/${brewery.latitude},${brewery.longitude}`}\r\n                  className=\"btn btn-sm btn-dark m-3 directions-button\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  <FontAwesomeIcon icon={faDirections} /> Get Directions\r\n                </a>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Brewery;\r\n","import React from \"react\";\r\nimport \"../styles/Loader.css\";\r\n\r\nconst Loader = () => {\r\n  return (\r\n    <div className=\"loader\">\r\n      <h4>Loading...</h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Loader;\r\n","import React from \"react\";\r\nimport \"../styles/ErrorMessage.css\";\r\n\r\nconst ErrorMessage = () => {\r\n  return (\r\n    <div className=\"error-message\">\r\n      <h5>Unable to fetch data. Please try again after sometime</h5>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n","export const properties = {\r\n  breweryUrl: \"https://api.openbrewerydb.org/breweries\",\r\n  tileLayer:\r\n    \"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\",\r\n  defaultCity: \"Ann Arbor\",\r\n  defaultPosition: [42.25362, -83.7343],\r\n  breweryTypes: [\r\n    \"all\",\r\n    \"micro\",\r\n    \"regional\",\r\n    \"brewpub\",\r\n    \"large\",\r\n    \"planning\",\r\n    \"bar\",\r\n    \"contract\",\r\n    \"proprietor\"\r\n  ]\r\n};\r\n","import React from \"react\";\r\nimport Brewery from \"./Brewery\";\r\nimport { useFetch } from \"../hooks/FetchHook\";\r\nimport Loader from \"./Loader\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport { properties } from \"../properties\";\r\nimport \"../styles/Breweries.css\";\r\n\r\nconst Breweries = ({ name, city, filter }) => {\r\n  const filterToApply = filter === \"all\" ? \"\" : filter;\r\n  const url = `${properties.breweryUrl}?by_name=${name}&by_city=${city}&by_type=${filterToApply}&per_page=20`;\r\n\r\n  const [data, isLoading, error] = useFetch(url);\r\n\r\n  if (isLoading) return <Loader />;\r\n\r\n  if (error) return <ErrorMessage />;\r\n\r\n  const getBreweries = breweries => {\r\n    if (breweries) {\r\n      if (breweries.length !== 0)\r\n        return breweries.map((brewery, idx) => (\r\n          <Brewery key={brewery.id} index={idx} brewery={brewery} />\r\n        ));\r\n      else\r\n        return (\r\n          <div className=\"no-results-message\">\r\n            <h5>\r\n              No results for {name} {city} {filter}\r\n            </h5>\r\n          </div>\r\n        );\r\n    }\r\n  };\r\n\r\n  return <>{getBreweries(data)}</>;\r\n};\r\n\r\nexport default Breweries;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nexport const useFetch = (url, dependencies) => {\r\n  const [data, setData] = useState();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    console.log(\"Fetching data\");\r\n    fetch(url)\r\n      .then(resp => {\r\n        if (!resp.ok) {\r\n          throw Error(resp.statusText);\r\n        }\r\n        return resp.json();\r\n      })\r\n      .then(data => {\r\n        setData(data);\r\n        setIsLoading(false);\r\n      })\r\n      .catch(err => {\r\n        setError(true);\r\n        setIsLoading(false);\r\n      });\r\n  }, [url, dependencies]);\r\n\r\n  return [data, isLoading, error];\r\n};\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport \"../styles/Search.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Search = ({ onSearch }) => {\r\n  const nameRef = useRef(\"\");\r\n  const locationRef = useRef(\"\");\r\n\r\n  useEffect(() => {\r\n    nameRef.current.focus();\r\n  }, []);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSearch(nameRef.current.value, locationRef.current.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"search-box\" onSubmit={handleSubmit}>\r\n        <div className=\"search-item\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"brewery-name\"\r\n            placeholder=\"&#xf0fc;  Find breweries\"\r\n            ref={nameRef}\r\n          />\r\n        </div>\r\n        <div className=\"search-item\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"brewery-location\"\r\n            placeholder=\"&#xf041;  in your city\"\r\n            ref={locationRef}\r\n          />\r\n        </div>\r\n        <div className=\"search-button\">\r\n          <button type=\"submit\" className=\"btn btn-dark\">\r\n            <FontAwesomeIcon icon={faSearch} />{\" \"}\r\n            <span className=\"search-button-text\">Search</span>\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport L from \"leaflet\";\r\nimport \"../styles/BreweryMap.css\";\r\nimport \"leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css\";\r\nimport \"leaflet-defaulticon-compatibility\";\r\nimport { properties } from \"../properties\";\r\nimport { BreweryContext } from \"../context/BreweryContext\";\r\n\r\nconst BreweryMap = () => {\r\n  const { brewery } = useContext(BreweryContext);\r\n\r\n  useEffect(() => {\r\n    const map = L.map(\"map\", {\r\n      center: brewery\r\n        ? [brewery.latitude, brewery.longitude]\r\n        : properties.defaultPosition,\r\n      zoom: 17\r\n    });\r\n\r\n    L.tileLayer(properties.tileLayer, {\r\n      maxZoom: 19\r\n    }).addTo(map);\r\n\r\n    brewery && L.marker([brewery.latitude, brewery.longitude]).addTo(map);\r\n    return () => {\r\n      map.remove();\r\n    };\r\n  }, [brewery]);\r\n\r\n  return <div id=\"map\"></div>;\r\n};\r\n\r\nexport default BreweryMap;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/Filters.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { properties } from \"../properties\";\r\nimport { capitalizeFirstLetter } from \"../utility\";\r\n\r\nconst Filter = ({ onFilter }) => {\r\n  const [showFilterCard, setShowFilterCard] = useState(false);\r\n  const [selected, setSelected] = useState(properties.breweryTypes[0]);\r\n\r\n  const handleChange = e => {\r\n    setSelected(e.target.value);\r\n    onFilter(e.target.value);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    setShowFilterCard(!showFilterCard);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"filter-button\">\r\n        <button className=\"btn btn-dark\" onClick={handleClick}>\r\n          <FontAwesomeIcon icon={faFilter} /> Filter\r\n        </button>\r\n      </div>\r\n      {showFilterCard && (\r\n        <div className=\"filter-card d-flex flex-wrap\">\r\n          {properties.breweryTypes.map(type => (\r\n            <div className=\"flex-item radio-item\" key={type}>\r\n              <input\r\n                value={type}\r\n                type=\"radio\"\r\n                onChange={handleChange}\r\n                checked={selected === type}\r\n              />\r\n              <label className=\"pl-2\">{capitalizeFirstLetter(type)}</label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/Home.css\";\r\nimport Breweries from \"./Breweries\";\r\nimport Search from \"./Search\";\r\nimport BreweryMap from \"./BreweryMap\";\r\nimport Filter from \"./Filter\";\r\nimport { BreweryContext } from \"../context/BreweryContext\";\r\n\r\nconst Home = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n  const [brewery, setBrewery] = useState();\r\n  const [filter, setFilter] = useState(\"\");\r\n\r\n  const handleSearch = (name, location) => {\r\n    setName(name);\r\n    setLocation(location);\r\n  };\r\n\r\n  const handleFilter = type => {\r\n    setFilter(type);\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <BreweryContext.Provider value={{ brewery, setBrewery }}>\r\n        <div className=\"col-lg-5 col-sm-12 breweries\">\r\n          <Search onSearch={handleSearch} />\r\n          <Filter onFilter={handleFilter} />\r\n          <Breweries name={name} city={location} filter={filter} />\r\n        </div>\r\n        <div className=\"col-lg-7 col-sm-12\">\r\n          <BreweryMap />\r\n        </div>\r\n      </BreweryContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Home from \"./components/Home\";\r\n\r\nfunction App() {\r\n  return <Home />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}