{"version":3,"sources":["components/Brewery.jsx","components/Breweries.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Brewery","brewery","index","randomNumber","Math","floor","random","className","src","alt","name","brewery_type","replace","charAt","toUpperCase","street","city","state","postal_code","phone","href","website_url","Breweries","useState","breweries","setBreweries","useEffect","fetch","then","resp","json","data","map","idx","key","id","Home","type","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RA2CeA,G,MAxCC,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACpBC,EAAeC,KAAKC,MAAsB,IAAhBD,KAAKE,UACrC,OACE,oCACGL,GACC,yBAAKM,UAAU,QACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,2BACb,yBACEC,IAAG,mCAA8BL,EAA9B,YACHM,IAAI,UAGR,yBAAKF,UAAU,sBACb,4BACGL,EAAQ,EADX,KACgBD,EAAQS,MAExB,2BACGT,EAAQU,aAAaC,QACpBX,EAAQU,aAAaE,OAAO,GAC5BZ,EAAQU,aAAaE,OAAO,GAAGC,eAC9B,IAJL,WAOA,wCACab,EAAQc,OADrB,KAC+Bd,EAAQe,KADvC,KAC+Cf,EAAQgB,MADvD,KAEGhB,EAAQiB,aAEX,qCAAWjB,EAAQkB,OACnB,sCACU,uBAAGC,KAAMnB,EAAQoB,aAAcpB,EAAQoB,oBCVhDC,EApBG,SAAC,GAAc,IAAZN,EAAW,EAAXA,KAAW,EACIO,mBAAS,IADb,mBACvBC,EADuB,KACZC,EADY,KAW9B,OARAC,qBAAU,WACRC,MAAM,oDAAD,OAAqDX,IACvDY,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJN,EAAaM,QAEhB,IAGD,oCACGP,EAAUQ,KAAI,SAAC/B,EAASgC,GAAV,OACb,kBAAC,EAAD,CAASC,IAAKjC,EAAQkC,GAAIjC,MAAO+B,EAAKhC,QAASA,SCAxCmC,EAbF,WACX,OACE,yBAAK7B,UAAU,aACb,2BACE8B,KAAK,OACL9B,UAAU,eACV+B,YAAY,qBAEd,kBAAC,EAAD,CAAWtB,KAAK,gBCJPuB,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.d4d6850d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/Brewery.css\";\r\n\r\nconst Brewery = ({ brewery, index }) => {\r\n  const randomNumber = Math.floor(Math.random() * 200);\r\n  return (\r\n    <>\r\n      {brewery && (\r\n        <div className=\"card\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-3 col-sm-12 mb-4\">\r\n              <img\r\n                src={`https://picsum.photos/id/${randomNumber}/200/200`}\r\n                alt=\"beer\"\r\n              ></img>\r\n            </div>\r\n            <div className=\"col-lg-9 col-sm-12\">\r\n              <h4>\r\n                {index + 1}. {brewery.name}\r\n              </h4>\r\n              <p>\r\n                {brewery.brewery_type.replace(\r\n                  brewery.brewery_type.charAt(0),\r\n                  brewery.brewery_type.charAt(0).toUpperCase()\r\n                )}{\" \"}\r\n                brewery\r\n              </p>\r\n              <p>\r\n                Location: {brewery.street}, {brewery.city}, {brewery.state} -\r\n                {brewery.postal_code}\r\n              </p>\r\n              <p>Phone: {brewery.phone}</p>\r\n              <p>\r\n                Website <a href={brewery.website_url}>{brewery.website_url}</a>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Brewery;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Brewery from \"./Brewery\";\r\n\r\nconst Breweries = ({ city }) => {\r\n  const [breweries, setBreweries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(`https://api.openbrewerydb.org/breweries/?by_city=${city}`)\r\n      .then(resp => resp.json())\r\n      .then(data => {\r\n        setBreweries(data);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {breweries.map((brewery, idx) => (\r\n        <Brewery key={brewery.id} index={idx} brewery={brewery} />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Breweries;\r\n","import React from \"react\";\r\nimport \"../styles/Home.css\";\r\nimport Breweries from \"./Breweries\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        placeholder=\"Search breweries\"\r\n      ></input>\r\n      <Breweries city=\"ann arbor\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}