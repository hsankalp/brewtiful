{"version":3,"sources":["components/Brewery.jsx","components/Breweries.jsx","components/Search.jsx","components/Filter.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["Brewery","brewery","index","randomNumber","Math","floor","random","className","src","alt","name","brewery_type","replace","charAt","toUpperCase","icon","faMapMarkerAlt","street","city","state","postal_code","faPhoneAlt","phone","website_url","faExternalLinkAlt","href","Breweries","useState","breweries","setBreweries","useEffect","url","console","log","fetch","then","resp","json","data","length","map","idx","key","id","Search","props","setName","location","setLocation","onSubmit","e","preventDefault","onSearch","type","placeholder","onChange","target","value","Filter","Home","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb873db6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faExternalLinkAlt,\r\n  faMapMarkerAlt,\r\n  faPhoneAlt\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../styles/Brewery.css\";\r\n\r\nconst Brewery = ({ brewery, index }) => {\r\n  const randomNumber = Math.floor(Math.random() * 200);\r\n  return (\r\n    <>\r\n      {brewery && (\r\n        <div className=\"card brewery-card\">\r\n          <div className=\"d-flex flex-wrap\">\r\n            <div className=\"flex-item p-2\">\r\n              <img\r\n                src={`https://picsum.photos/id/${randomNumber}/250/250`}\r\n                alt=\"beer\"\r\n              ></img>\r\n            </div>\r\n            <div className=\"flex-item p-2\">\r\n              <h4>\r\n                {index + 1}. {brewery.name}\r\n              </h4>\r\n              <p>\r\n                {brewery.brewery_type.replace(\r\n                  brewery.brewery_type.charAt(0),\r\n                  brewery.brewery_type.charAt(0).toUpperCase()\r\n                )}{\" \"}\r\n                brewery\r\n              </p>\r\n              <p>\r\n                <FontAwesomeIcon icon={faMapMarkerAlt} /> {brewery.street}\r\n                <br></br>\r\n                {brewery.city}, {brewery.state}\r\n                <br></br>\r\n                {brewery.postal_code}\r\n              </p>\r\n              <p>\r\n                <FontAwesomeIcon icon={faPhoneAlt} /> {brewery.phone}\r\n              </p>\r\n              <p>\r\n                {brewery.website_url && (\r\n                  <FontAwesomeIcon icon={faExternalLinkAlt} />\r\n                )}{\" \"}\r\n                <a href={brewery.website_url}>{brewery.website_url}</a>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Brewery;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Brewery from \"./Brewery\";\r\nimport \"../styles/Breweries.css\";\r\n\r\nconst Breweries = ({ name, city }) => {\r\n  const [breweries, setBreweries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const url = `https://api.openbrewerydb.org/breweries?by_name=${name}&by_city=${city}`;\r\n    console.log(`fetching data from ${url}`);\r\n    fetch(url)\r\n      .then(resp => resp.json())\r\n      .then(data => {\r\n        setBreweries(data);\r\n      });\r\n  }, [name, city]);\r\n\r\n  return (\r\n    <>\r\n      {breweries.length !== 0 ? (\r\n        breweries.map((brewery, idx) => (\r\n          <Brewery key={brewery.id} index={idx} brewery={brewery} />\r\n        ))\r\n      ) : (\r\n        <h5 className=\"error-message\">{`No Results for ${name} ${city}`}</h5>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Breweries;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/Search.css\";\r\n\r\nconst Search = props => {\r\n  const [name, setName] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    props.onSearch(name, location);\r\n  };\r\n\r\n  const handleNameChange = e => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const handleLocationChange = e => {\r\n    setLocation(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"search-box\" onSubmit={handleSubmit}>\r\n        <div className=\"search-item\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"brewery-name\"\r\n            placeholder=\"&#xf0fc;  Search breweries\"\r\n            onChange={handleNameChange}\r\n          />\r\n        </div>\r\n        <div className=\"search-item\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"brewery-location\"\r\n            placeholder=\"&#xf041;  Search by city\"\r\n            onChange={handleLocationChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\" className=\"btn btn-dark search-button\">\r\n            Search\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport \"../styles/Filters.css\";\r\n\r\nconst Filter = () => {\r\n  return (\r\n    <div className=\"card filter-card\">\r\n      <p>Filters coming soon ....</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/Home.css\";\r\nimport Breweries from \"./Breweries\";\r\nimport Search from \"./Search\";\r\nimport Filter from \"./Filter\";\r\n\r\nconst Home = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [location, setLocation] = useState(\"Ann Arbor\");\r\n\r\n  const handleSearch = (name, location) => {\r\n    setName(name);\r\n    setLocation(location);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Search onSearch={handleSearch} />\r\n      <Filter />\r\n      <Breweries name={name} city={location} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}