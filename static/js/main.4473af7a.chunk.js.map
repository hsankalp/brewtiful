{"version":3,"sources":["capitalizeFirstLetter.js","components/Brewery.jsx","properties.js","components/Breweries.jsx","components/Search.jsx","components/BreweryMap.jsx","components/Filter.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["capitalizeFirstLetter","string","replace","charAt","toUpperCase","Brewery","brewery","index","onSelect","randomNumber","Math","floor","random","className","src","alt","name","brewery_type","icon","faMapMarkerAlt","street","city","state","postal_code","phone","href","faPhoneAlt","website_url","faExternalLinkAlt","latitude","longitude","onClick","alert","handleClick","faCompass","target","rel","faDirections","properties","breweryUrl","tileLayer","defaultCity","defaultPosition","breweryTypes","Breweries","filter","useState","breweries","setBreweries","useEffect","url","console","log","fetch","then","resp","json","data","handleSelect","location","length","map","idx","key","id","Search","props","setName","setLocation","onSubmit","e","preventDefault","onSearch","type","placeholder","onChange","value","faSearch","BreweryMap","position","L","center","zoom","zoomControl","maxZoom","addTo","marker","remove","Filter","onFilter","filterCard","setFilterCard","selected","setSelected","handleChange","faFilter","checked","Home","setPosition","setFilter","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4473af7a.chunk.js","sourcesContent":["export function capitalizeFirstLetter(string) {\r\n  return string.replace(string.charAt(0), string.charAt(0).toUpperCase());\r\n}\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faExternalLinkAlt,\r\n  faMapMarkerAlt,\r\n  faPhoneAlt,\r\n  faDirections,\r\n  faCompass\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../styles/Brewery.css\";\r\nimport { capitalizeFirstLetter } from \"../capitalizeFirstLetter\";\r\n\r\nconst Brewery = ({ brewery, index, onSelect }) => {\r\n  const randomNumber = Math.floor(Math.random() * 200);\r\n\r\n  const handleClick = brewery => {\r\n    if (brewery.latitude && brewery.longitude) {\r\n      onSelect([brewery.latitude, brewery.longitude]);\r\n    } else {\r\n      alert(`Location not available for ${brewery.name}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {brewery && (\r\n        <div className=\"card brewery-card\">\r\n          <div className=\"d-flex flex-wrap\">\r\n            <div className=\"flex-item p-2\">\r\n              <img\r\n                src={`https://picsum.photos/id/${randomNumber}/200/200`}\r\n                alt=\"beer\"\r\n              ></img>\r\n            </div>\r\n            <div className=\"flex-item p-2\">\r\n              <h5 className=\"brewery-name\">\r\n                {index + 1}. {brewery.name}\r\n              </h5>\r\n              <p>{capitalizeFirstLetter(brewery.brewery_type)} brewery</p>\r\n              <p>\r\n                <FontAwesomeIcon icon={faMapMarkerAlt} /> {brewery.street}\r\n                <br></br>\r\n                {brewery.city}, {brewery.state}\r\n                <br></br>\r\n                {brewery.postal_code}\r\n              </p>\r\n              {brewery.phone && (\r\n                <p>\r\n                  <a href={`tel:${brewery.phone}`}>\r\n                    <FontAwesomeIcon icon={faPhoneAlt} /> {brewery.phone}\r\n                  </a>\r\n                </p>\r\n              )}\r\n              <p>\r\n                {brewery.website_url && (\r\n                  <FontAwesomeIcon icon={faExternalLinkAlt} />\r\n                )}{\" \"}\r\n                <a href={brewery.website_url}>{brewery.website_url}</a>\r\n              </p>\r\n              {brewery.latitude && brewery.longitude && (\r\n                <button\r\n                  className=\"btn btn-sm btn-dark location-button\"\r\n                  onClick={() => handleClick(brewery)}\r\n                >\r\n                  <FontAwesomeIcon icon={faCompass} /> Location\r\n                </button>\r\n              )}\r\n              {brewery.latitude && brewery.longitude && (\r\n                <a\r\n                  href={`https://www.google.com/maps/place/${brewery.latitude},${brewery.longitude}`}\r\n                  className=\"btn btn-sm btn-dark m-3 directions-button\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  <FontAwesomeIcon icon={faDirections} /> Get Directions\r\n                </a>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Brewery;\r\n","export const properties = {\r\n  breweryUrl: \"https://api.openbrewerydb.org/breweries\",\r\n  tileLayer:\r\n    \"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\",\r\n  defaultCity: \"Ann Arbor\",\r\n  defaultPosition: [42.25362, -83.7343],\r\n  breweryTypes: [\r\n    \"all\",\r\n    \"micro\",\r\n    \"regional\",\r\n    \"brewpub\",\r\n    \"large\",\r\n    \"planning\",\r\n    \"bar\",\r\n    \"contract\",\r\n    \"proprietor\"\r\n  ]\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Brewery from \"./Brewery\";\r\nimport \"../styles/Breweries.css\";\r\nimport { properties } from \"../properties\";\r\n\r\nconst Breweries = ({ name, city, filter, onSelect }) => {\r\n  const [breweries, setBreweries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const url = `${\r\n      properties.breweryUrl\r\n    }?by_name=${name}&by_city=${city}&by_type=${\r\n      filter === \"all\" ? \"\" : filter\r\n    }&per_page=50`;\r\n    console.log(`fetching data from ${url}`);\r\n    fetch(url)\r\n      .then(resp => resp.json())\r\n      .then(data => {\r\n        setBreweries(data);\r\n      });\r\n  }, [name, city, filter]);\r\n\r\n  const handleSelect = (location, name) => {\r\n    onSelect(location, name);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {breweries.length !== 0 ? (\r\n        breweries.map((brewery, idx) => (\r\n          <Brewery\r\n            key={brewery.id}\r\n            index={idx}\r\n            brewery={brewery}\r\n            onSelect={handleSelect}\r\n          />\r\n        ))\r\n      ) : (\r\n        <h5 className=\"error-message\">{`No Results for ${name} ${city} ${filter}`}</h5>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Breweries;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/Search.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Search = props => {\r\n  const [name, setName] = useState(\"\");\r\n  const [location, setLocation] = useState(\"\");\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    props.onSearch(name, location);\r\n  };\r\n\r\n  const handleNameChange = e => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const handleLocationChange = e => {\r\n    setLocation(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"search-box\" onSubmit={handleSubmit}>\r\n        <div className=\"search-item\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"brewery-name\"\r\n            placeholder=\"&#xf0fc;  Search breweries\"\r\n            onChange={handleNameChange}\r\n          />\r\n        </div>\r\n        <div className=\"search-item\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"brewery-location\"\r\n            placeholder=\"&#xf041;  Search by city\"\r\n            onChange={handleLocationChange}\r\n          />\r\n        </div>\r\n        <div className=\"search-button\">\r\n          <button type=\"submit\" className=\"btn btn-dark\">\r\n            <FontAwesomeIcon icon={faSearch} />{\" \"}\r\n            <span className=\"search-button-text\">Search</span>\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useEffect } from \"react\";\r\nimport L from \"leaflet\";\r\nimport \"../styles/BreweryMap.css\";\r\nimport \"leaflet-defaulticon-compatibility/dist/leaflet-defaulticon-compatibility.webpack.css\";\r\nimport \"leaflet-defaulticon-compatibility\";\r\nimport { properties } from \"../properties\";\r\n\r\nconst BreweryMap = ({ position }) => {\r\n  useEffect(() => {\r\n    const map = L.map(\"map\", {\r\n      center: position || properties.defaultPosition,\r\n      zoom: 17,\r\n      zoomControl: false\r\n    });\r\n    L.tileLayer(properties.tileLayer, {\r\n      maxZoom: 19\r\n    }).addTo(map);\r\n    position && L.marker(position).addTo(map);\r\n    return () => {\r\n      map.remove();\r\n    };\r\n  }, [position]);\r\n\r\n  return <div id=\"map\"></div>;\r\n};\r\n\r\nexport default BreweryMap;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/Filters.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFilter } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { properties } from \"../properties\";\r\nimport { capitalizeFirstLetter } from \"../capitalizeFirstLetter\";\r\n\r\nconst Filter = ({ onFilter }) => {\r\n  const [filterCard, setFilterCard] = useState(false);\r\n  const [selected, setSelected] = useState(properties.breweryTypes[0]);\r\n\r\n  const handleChange = e => {\r\n    setSelected(e.target.value);\r\n    onFilter(e.target.value);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    setFilterCard(!filterCard);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"filter-button\">\r\n        <button className=\"btn btn-dark\" onClick={handleClick}>\r\n          <FontAwesomeIcon icon={faFilter} /> Filter\r\n        </button>\r\n      </div>\r\n      {filterCard && (\r\n        <div className=\"filter-card d-flex flex-wrap\">\r\n          {properties.breweryTypes.map(type => (\r\n            <div className=\"flex-item radio-item\" key={type}>\r\n              <input\r\n                value={type}\r\n                type=\"radio\"\r\n                onChange={handleChange}\r\n                checked={selected === type}\r\n              />\r\n              <label className=\"pl-2\">{capitalizeFirstLetter(type)}</label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { useState } from \"react\";\r\nimport \"../styles/Home.css\";\r\nimport Breweries from \"./Breweries\";\r\nimport Search from \"./Search\";\r\nimport BreweryMap from \"./BreweryMap\";\r\nimport { properties } from \"../properties\";\r\nimport Filter from \"./Filter\";\r\n\r\nconst Home = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [location, setLocation] = useState(properties.defaultCity);\r\n  const [position, setPosition] = useState();\r\n  const [filter, setFilter] = useState(\"\");\r\n\r\n  const handleSearch = (name, location) => {\r\n    setName(name);\r\n    setLocation(location);\r\n  };\r\n\r\n  const handleSelect = location => {\r\n    setPosition(location);\r\n  };\r\n\r\n  const handleFilter = type => {\r\n    setFilter(type);\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-lg-5 col-sm-12 breweries\">\r\n        <Search onSearch={handleSearch} />\r\n        <Filter onFilter={handleFilter} />\r\n        <Breweries\r\n          name={name}\r\n          city={location}\r\n          filter={filter}\r\n          onSelect={handleSelect}\r\n        />\r\n      </div>\r\n      <div className=\"col-lg-7 col-sm-12\">\r\n        <BreweryMap position={position} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"leaflet/dist/leaflet.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}